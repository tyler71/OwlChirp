
name: Build / Push Registry; Deploy to Swarm

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Used for AWS Role Assumption
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Variables
        id: v
        run: |
          echo "::set-output name=date::$(date '+%m_%d_%Y')"
          echo "::set-output name=owner::$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=reponame::$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        env:
          SESSION_NAME: ${{ steps.v.outputs.reponame }}_ghactions_deployment
        with:
          role-to-assume: ${{ vars.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          role-duration-seconds: 900
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.v.outputs.reponame }}
          CONNECT_INSTANCE: ${{ vars.CONNECT_INSTANCE }}
          CONNECT_DOMAIN: ${{ vars.CONNECT_DOMAIN }}
          TIME_ZONE: ${{ vars.TIME_ZONE }}
          TELEMETRY_URL: ${{ vars.TELEMETRY_URL }}
        with:
          build-args: |
            SET_GIT_SHA=${{ github.sha }}
            SET_BUILD_NUMBER=${{ github.run_number }}
            CONNECT_INSTANCE=${{ env.CONNECT_INSTANCE }}
            CONNECT_DOMAIN=${{ env.CONNECT_DOMAIN }}
            TELEMETRY_URL=${{ env.TELEMETRY_URL }}
            TIME_ZONE=${{ env.TIME_ZONE }}
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.v.outputs.date }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:build_${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ steps.v.outputs.reponame }}:${{ steps.v.outputs.date }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CONNECT_INSTANCE: ${{ vars.CONNECT_INSTANCE }}
          DB_STRING: ${{ vars.DB_STRING }}
          HOST: ${{ vars.HOST }}
          REGION: ${{ vars.AWS_DEFAULT_REGION }}
          ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_HOST: ssh://${{ vars.REMOTE_SERVER_USERNAME }}@${{ vars.REMOTE_SERVER_HOSTNAME }}
          REPO_NAME: ${{ steps.v.outputs.reponame }}
        run: |
          mkdir -p ~/.ssh
          echo -n "${{ secrets.BASE64_REMOTE_SERVER_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
          docker stack deploy --with-registry-auth -c deploy/docker-compose.yml ${{ env.REPO_NAME }}
          
