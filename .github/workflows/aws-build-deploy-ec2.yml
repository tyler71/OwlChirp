name: Build / Push AWS ECR; Deploy to EC2

on:
  push:
    branches:
      - production

jobs:
  deploy:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Variables
        id: v
        run: |
          echo "::set-output name=date::$(date '+%m_%d_%Y')"
          echo "::set-output name=reponame::$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.v.outputs.reponame }}
          CONNECT_INSTANCE: ${{ secrets.CONNECT_INSTANCE }}
          CONNECT_DOMAIN: ${{ vars.CONNECT_DOMAIN }}
          TIME_ZONE: ${{ vars.TIME_ZONE }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.v.outputs.date }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:build_${{ github.run_number }}
          build-args: |
            SET_GIT_SHA=${{ github.sha }}
            SET_BUILD_NUMBER=${{ github.run_number }}
            CONNECT_INSTANCE=${{ env.CONNECT_INSTANCE }}
            CONNECT_DOMAIN=${{ env.CONNECT_DOMAIN }}
            TIME_ZONE=${{ env.TIME_ZONE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          CONNECT_INSTANCE: ${{ secrets.CONNECT_INSTANCE }}
          DB_STRING: ${{ vars.DB_STRING }}
          DOCKER_HOST: ssh://${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_HOSTNAME }}
          ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
          HOST: ${{ vars.HOST }}
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ steps.v.outputs.reponame }}:${{ steps.v.outputs.date }}
          REGION: ${{ vars.AWS_DEFAULT_REGION }}
          SSH_STRING: ${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_HOSTNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SERVER_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
          docker stack deploy --with-registry-auth -c deploy/docker-compose.yml ${{ steps.v.outputs.reponame }}
          
